import * as fs from 'fs/promises';
import * as path from 'path';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 */
export class FileSystemUtil {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
   */
  static async ensureMediaDirectories(): Promise<void> {
    const uploadsDir = path.join(process.cwd(), 'uploads');
    const directories = [
      uploadsDir,
      path.join(uploadsDir, 'images'),
      path.join(uploadsDir, 'videos'),
      path.join(uploadsDir, 'thumbnails'),
      path.join(uploadsDir, 'temp')
    ];

    for (const dir of directories) {
      try {
        await fs.mkdir(dir, { recursive: true });
        console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${dir}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
   */
  static async fileExists(filePath: string): Promise<boolean> {
    try {
      await fs.access(filePath);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
   */
  static async getFileSize(filePath: string): Promise<number> {
    try {
      const stats = await fs.stat(filePath);
      return stats.size;
    } catch {
      return 0;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  static async deleteFileIfExists(filePath: string): Promise<boolean> {
    try {
      if (await this.fileExists(filePath)) {
        await fs.unlink(filePath);
        return true;
      }
      return false;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
   */
  static async createSymlink(target: string, linkPath: string): Promise<boolean> {
    try {
      if (await this.fileExists(linkPath)) {
        await fs.unlink(linkPath);
      }
      await fs.symlink(target, linkPath);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  static async getDirectoryInfo(dirPath: string): Promise<{
    exists: boolean;
    fileCount: number;
    totalSize: number;
  }> {
    try {
      if (!(await this.fileExists(dirPath))) {
        return { exists: false, fileCount: 0, totalSize: 0 };
      }

      const files = await fs.readdir(dirPath);
      let totalSize = 0;
      let fileCount = 0;

      for (const file of files) {
        const filePath = path.join(dirPath, file);
        const stats = await fs.stat(filePath);
        if (stats.isFile()) {
          totalSize += stats.size;
          fileCount++;
        }
      }

      return { exists: true, fileCount, totalSize };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:`, error);
      return { exists: false, fileCount: 0, totalSize: 0 };
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  static async cleanupTempFiles(maxAgeHours: number = 24): Promise<number> {
    const tempDir = path.join(process.cwd(), 'uploads', 'temp');
    let deletedCount = 0;

    try {
      if (!(await this.fileExists(tempDir))) {
        return 0;
      }

      const files = await fs.readdir(tempDir);
      const maxAge = Date.now() - (maxAgeHours * 60 * 60 * 1000);

      for (const file of files) {
        const filePath = path.join(tempDir, file);
        const stats = await fs.stat(filePath);
        
        if (stats.isFile() && stats.mtime.getTime() < maxAge) {
          await fs.unlink(filePath);
          deletedCount++;
        }
      }

      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);
      return deletedCount;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:`, error);
      return 0;
    }
  }
} 