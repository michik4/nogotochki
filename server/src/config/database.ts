import { Pool, PoolConfig } from 'pg';
import { DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD } from '../const';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
export interface DatabaseConfig extends PoolConfig {
  host: string;
  port: number;
  database: string;
  user: string;
  password: string;
}

export const databaseConfig: DatabaseConfig = {
  host: DB_HOST || 'localhost',
  port: parseInt(DB_PORT || '5432'),
  database: DB_NAME || 'nailmasters',
  user: DB_USER || 'postgres',
  password: DB_PASSWORD || 'password',
  max: 20, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
  idleTimeoutMillis: 30000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  connectionTimeoutMillis: 2000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
export const pool = new Pool(databaseConfig);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
export const connectDatabase = async (): Promise<void> => {
  // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
  if (process.env.NODE_ENV === 'development' && !process.env.DB_ENABLED) {
    console.log('üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)');
    console.log(`üìç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${databaseConfig.database} –Ω–∞ ${databaseConfig.host}:${databaseConfig.port}`);
    console.log('üí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DB_ENABLED=true –≤ .env');
    return;
  }

  try {
    const client = await pool.connect();
    console.log('üóÑÔ∏è  PostgreSQL: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log(`üìç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${databaseConfig.database} –Ω–∞ ${databaseConfig.host}:${databaseConfig.port}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const result = await client.query('SELECT NOW()');
    console.log('‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ë–î:', result.rows[0].now);
    
    client.release();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error);
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –≤ .env —Ñ–∞–π–ª–µ');
    console.log('üí° –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DB_ENABLED=false –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ë–î');
    process.exit(1);
  }
};

// Graceful shutdown
export const closeDatabase = async (): Promise<void> => {
  if (process.env.NODE_ENV === 'development' && !process.env.DB_ENABLED) {
    console.log('üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è)');
    return;
  }

  try {
    await pool.end();
    console.log('üîí PostgreSQL: –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
  }
}; 