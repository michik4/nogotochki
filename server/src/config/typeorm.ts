import { DataSource } from 'typeorm';
import { DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD } from '../const';

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
import { User } from '../entities/User';
import { Client } from '../entities/Client';
import { Master } from '../entities/Master';
import { Design } from '../entities/Design';
import { Booking } from '../entities/Booking';
import { Media } from '../entities/Media.entity';
import { Comment } from '../entities/Comment';
import { Like } from '../entities/Like';
import { MasterDesign } from '../entities/MasterDesign';
import { Notification } from '../entities/Notification';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeORM
export const AppDataSource = new DataSource({
  type: 'postgres',
  host: DB_HOST || 'localhost',
  port: parseInt(DB_PORT || '5432'),
  username: DB_USER || 'postgres',
  password: DB_PASSWORD || 'password',
  database: DB_NAME || 'nailmasters',
  
  // –°—É—â–Ω–æ—Å—Ç–∏
  entities: [
    User,
    Client,
    Master,
    Design,
    Booking,
    Media,
    Comment,
    Like,
    MasterDesign,
    Notification
  ],
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  synchronize: process.env.NODE_ENV === 'development', // –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  logging: process.env.NODE_ENV === 'development' ? ['query', 'error'] : ['error'],
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  extra: {
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const initializeDatabase = async (): Promise<void> => {
  try {
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
      console.log('üóÑÔ∏è  TypeORM: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      console.log(`üìç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${DB_NAME} –Ω–∞ ${DB_HOST}:${DB_PORT}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const closeDatabase = async (): Promise<void> => {
  try {
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      console.log('üîí TypeORM: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
  }
}; 